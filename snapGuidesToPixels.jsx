// snapGuidesToPixels - Adobe Photoshop Script// Requirements: Adobe Photoshop CS3, or higher// Description: "snaps" guides to pixels using a very convoluted way of exporting slices of the document.// Version: 0.5.0// Author: Matt Irwin// Website: http://www.irwinone.com// ============================================================================// Installation:// NOTE: THIS SCRIPT REQUIRES UNIQUE SETUP INSTRUCTIONS - SEE README.HTML FOR DETAILS// 1. Place script in '/Applications/Adobe\ Photoshop\ CS#/Presets/Scripts/' for mac //    or 'C:\Program Files\Adobe\Adobe Photoshop CS#\Presets\Scripts\' for win// 2. Restart Photoshop// 3. Choose File > Scripts > snapGuidesToPixels// ============================================================================#target photoshop#include "makeGuide.jsx"//add some array methods for later useif (!Array.prototype.forEach){  Array.prototype.forEach = function(fun /*, thisp*/)  {    var len = this.length >>> 0;    if (typeof fun != "function")      throw new TypeError();    var thisp = arguments[1];    for (var i = 0; i < len; i++)    {      if (i in this)        fun.call(thisp, this[i], i, this);    }  };}Array.prototype.unique = function () {	var r = new Array();	o:for(var i = 0, n = this.length; i < n; i++)	{		for(var x = 0, y = r.length; x < y; x++)		{			if(r[x]==this[i])			{				continue o;			}		}		r[r.length] = this[i];	}	return r;}//grab a few "constants" for later action descriptor usevar currentTypeIDS = {}; //TODO ciTTIDcurrentTypeIDS.MAKE = charIDToTypeID( "Mk  " ); // Make new object - rcurrentTypeIDS.GUID = charIDToTypeID( "Gd  " ); // Guide - rcurrentTypeIDS.USNG = charIDToTypeID( "Usng" ); // Using -rcurrentTypeIDS.NULL = charIDToTypeID( "null" ); // Null ? -rcurrentTypeIDS.DELT = charIDToTypeID( "Dlt " ); // Delete -rcurrentTypeIDS.ORDN = charIDToTypeID( "Ordn" ); // Ordninary? -rcurrentTypeIDS.ALLx = charIDToTypeID( "Al  " ); // All -rcurrentTypeIDS.SLICE = stringIDToTypeID( "slice" ); // Slice -rvar mPath = Folder.userData;var mTempPath = Folder.temp;function slicesFromGuides() {    var nSlices = new ActionDescriptor();	var nSliceAction = new ActionReference();	nSliceAction.putClass( currentTypeIDS.SLICE );    nSlices.putReference( currentTypeIDS.NULL, nSliceAction );    nSlices.putClass( currentTypeIDS.USNG , currentTypeIDS.GUID );    executeAction( currentTypeIDS.MAKE, nSlices, DialogModes.NO );}function clearGuides() {	var nGuides = new ActionDescriptor();	var nDeleteAction = new ActionReference();	nDeleteAction.putEnumerated( currentTypeIDS.GUID, currentTypeIDS.ORDN, currentTypeIDS.ALLx );	nGuides.putReference( currentTypeIDS.NULL, nDeleteAction );	executeAction( currentTypeIDS.DELT, nGuides, DialogModes.NO );}function warningWindow() {	var showmeCheck;	var cfilePath = mPath + "snapGuideWarn.txt";	var cfile = new File(cfilePath);	var isopen_r = cfile.open("r");		if (isopen_r) {		cfile.seek(0,0);		showmeCheck = cfile.readch();		cfile.close();	}		if (showmeCheck == 1) {return 1};		var dlg = new Window('dialog', 'WARNING!',{x:100, y:100, width:400, height:140}); 	dlg.add('statictext', [10,10,390,45], 'This script will destroy all existing HTML slices associated with the current document', {multiline:true});	dlg.checkNoshow = dlg.add('checkbox', [10,55,390,80], 'Don\'t show me this again');	dlg.add('button', {x:10, y:90, width:100, height:20}, 'Build', {name:'ok'}); 	dlg.add('button', {x:120, y:90, width:100, height:20}, 'Cancel', {name:'cancel'}); 		dlg.checkNoshow.onClick = function() {		var isopen_w = cfile.open("w");		if (isopen_w) {			if (dlg.checkNoshow.value){				cfile.write("1");				} else {				cfile.write("0");			}		}		cfile.close();	}	return dlg.show();}function primingWindow() {	var dlg = new Window('dialog', 'Is your script primed?',{x:100, y:100, width:400, height:140}); 	dlg.add('statictext', [10,10,390,70], 'Save for web output settings must be prepared prior to running this script.  See readme.html for details.  Have you prepared your output settings?', {multiline:true});		dlg.add('button', {x:10, y:80, width:100, height:20}, 'Yes', {name:'ok'}); 	dlg.add('button', {x:120, y:80, width:100, height:20}, 'No', {name:'cancel'}); 		return dlg.show();}function outputSliceHTML() {	var id13 = charIDToTypeID( "Expr" );		var desc4 = new ActionDescriptor();		var id14 = charIDToTypeID( "Usng" );			var desc5 = new ActionDescriptor();			var id15 = charIDToTypeID( "Op  " );			var id16 = charIDToTypeID( "SWOp" );			var id17 = charIDToTypeID( "OpSa" );			desc5.putEnumerated( id15, id16, id17 );			var id18 = charIDToTypeID( "Fmt " );			var id19 = charIDToTypeID( "IRFm" );			var id20 = charIDToTypeID( "GIFf" );			desc5.putEnumerated( id18, id19, id20 );			var id21 = charIDToTypeID( "Intr" );			desc5.putBoolean( id21, false );			var id22 = charIDToTypeID( "RedA" );			var id23 = charIDToTypeID( "IRRd" );			var id24 = charIDToTypeID( "Sltv" );			desc5.putEnumerated( id22, id23, id24 );			var id25 = charIDToTypeID( "RChT" );			desc5.putBoolean( id25, false );			var id26 = charIDToTypeID( "RChV" );			desc5.putBoolean( id26, false );			var id27 = charIDToTypeID( "AuRd" );			desc5.putBoolean( id27, false );			var id28 = charIDToTypeID( "NCol" );			desc5.putInteger( id28, 256 );			var id29 = charIDToTypeID( "Dthr" );			var id30 = charIDToTypeID( "IRDt" );			var id31 = charIDToTypeID( "Dfsn" );			desc5.putEnumerated( id29, id30, id31 );			var id32 = charIDToTypeID( "DthA" );			desc5.putInteger( id32, 100 );			var id33 = charIDToTypeID( "DChS" );			desc5.putInteger( id33, 0 );			var id34 = charIDToTypeID( "DCUI" );			desc5.putInteger( id34, 0 );			var id35 = charIDToTypeID( "DChT" );			desc5.putBoolean( id35, false );			var id36 = charIDToTypeID( "DChV" );			desc5.putBoolean( id36, false );			var id37 = charIDToTypeID( "WebS" );			desc5.putInteger( id37, 0 );			var id38 = charIDToTypeID( "TDth" );			var id39 = charIDToTypeID( "IRDt" );			var id40 = charIDToTypeID( "None" );			desc5.putEnumerated( id38, id39, id40 );			var id41 = charIDToTypeID( "TDtA" );			desc5.putInteger( id41, 100 );			var id42 = charIDToTypeID( "Loss" );			desc5.putInteger( id42, 0 );			var id43 = charIDToTypeID( "LChS" );			desc5.putInteger( id43, 0 );			var id44 = charIDToTypeID( "LCUI" );			desc5.putInteger( id44, 100 );			var id45 = charIDToTypeID( "LChT" );			desc5.putBoolean( id45, false );			var id46 = charIDToTypeID( "LChV" );			desc5.putBoolean( id46, false );			var id47 = charIDToTypeID( "Trns" );			desc5.putBoolean( id47, true );			var id48 = charIDToTypeID( "Mtt " );			desc5.putBoolean( id48, true );			var id49 = charIDToTypeID( "MttR" );			desc5.putInteger( id49, 160 );			var id50 = charIDToTypeID( "MttG" );			desc5.putInteger( id50, 160 );			var id51 = charIDToTypeID( "MttB" );			desc5.putInteger( id51, 160 );			var id52 = charIDToTypeID( "SHTM" );			desc5.putBoolean( id52, true );			var id53 = charIDToTypeID( "SImg" );			desc5.putBoolean( id53, false );			var id54 = charIDToTypeID( "SSSO" );			desc5.putBoolean( id54, false );			var id55 = charIDToTypeID( "SSLt" );				var list1 = new ActionList();			desc5.putList( id55, list1 );			var id56 = charIDToTypeID( "DIDr" );			desc5.putBoolean( id56, true );			var id57 = charIDToTypeID( "In  " );			desc5.putPath( id57, new File( mTempPath ) );		var id58 = stringIDToTypeID( "SaveForWeb" );		desc4.putObject( id14, id58, desc5 );	executeAction( id13, desc4, DialogModes.NO );}function readHTML() {	var contents;	var hPath = mTempPath;	var dname = app.activeDocument.name;	var splitChar = ".";	dname = (dname.indexOf(splitChar) > 1) ? dname.substring(0,dname.indexOf(splitChar)) : dname;	hPath += "/" + dname + ".html";		var theFile = new File(hPath);	var isopen_ra = theFile.open("r");	if (isopen_ra) {		theFile.seek(0,0);		contents = theFile.read();		theFile.close();	}	theFile.remove();		return contents;}function stripExcess(element, index, array) {    array[index] = element.match(/\d+/g)[0];}function clearSlices() {	var nSlices = new ActionDescriptor();	var nDeleteAction = new ActionReference();	nDeleteAction.putEnumerated( currentTypeIDS.SLICE, currentTypeIDS.ORDN , currentTypeIDS.ALLx );	nSlices.putReference( currentTypeIDS.NULL, nDeleteAction );	executeAction( currentTypeIDS.DELT, nSlices, DialogModes.NO );}function setupGuides(contents, axis) {	if (axis == "X") {		var csspull = "left";		var endcap = app.activeDocument.width.toString();	} else {		var csspull = "top";		var endcap = app.activeDocument.height.toString();		axis = "Y";	}	var pattern = new RegExp("^" + csspull + ":\\d+px;", "gm");	var g_arr = contents.match(pattern);	g_arr.push(endcap);	g_arr.forEach(stripExcess);	g_arr = g_arr.unique();		g_arr.forEach(function(element, index) {		makeGuide(axis, parseInt(element));	});}function snapGuidesToPixels(){	var mywarn = warningWindow();		if (mywarn != 1) {return;}		var myprimed = primingWindow();	if (myprimed != 1) {return;}	slicesFromGuides();	clearGuides();	outputSliceHTML();		var contents = readHTML();		setupGuides(contents, "X");	setupGuides(contents, "Y");	clearSlices();}app.activeDocument.suspendHistory("Snap Guides to Pixels", "snapGuidesToPixels()");